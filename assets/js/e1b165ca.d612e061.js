"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["79475"],{38145:function(e,n,t){t.r(n),t.d(n,{default:()=>c,frontMatter:()=>a,metadata:()=>i,assets:()=>d,toc:()=>l,contentTitle:()=>r});var i=JSON.parse('{"id":"time-zones","title":"Time zones","description":"Overview","source":"@site/versioned_docs/version-5.0/time-zones.md","sourceDirName":".","slug":"/time-zones","permalink":"/lightweight-charts/docs/time-zones","draft":false,"unlisted":false,"tags":[],"version":"5.0","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"docsSidebar","previous":{"title":"Panes","permalink":"/lightweight-charts/docs/panes"},"next":{"title":"Introduction","permalink":"/lightweight-charts/docs/plugins/intro"}}'),s=t("85893"),o=t("50065");let a={sidebar_position:6},r="Time zones",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Approaches",id:"approaches",level:2},{value:"Using pure JavaScript",id:"using-pure-javascript",level:3},{value:"Using the date-fns-tz library",id:"using-the-date-fns-tz-library",level:3},{value:"Using the IANA time zone database",id:"using-the-iana-time-zone-database",level:3},{value:"Why are time zones not supported?",id:"why-are-time-zones-not-supported",level:2}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"time-zones",children:"Time zones"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["Lightweight Charts\u2122 ",(0,s.jsx)(n.strong,{children:"does not"})," natively ",(0,s.jsx)(n.strong,{children:"support"})," time zones. If necessary, you should handle time zone adjustments manually."]}),"\n",(0,s.jsx)(n.p,{children:"The library processes all date and time values in UTC. To support time zones, adjust each bar's timestamp in your dataset based on the appropriate time zone offset.\nTherefore, a UTC timestamp should correspond to the local time in the target time zone."}),"\n",(0,s.jsxs)(n.p,{children:["Consider the example. A data point has the ",(0,s.jsx)(n.code,{children:"2021-01-01T10:00:00.000Z"})," timestamp in UTC. You want to display it in the ",(0,s.jsx)(n.code,{children:"Europe/Moscow"})," time zone, which has the ",(0,s.jsx)(n.code,{children:"UTC+03:00"})," offset according to the ",(0,s.jsx)(n.a,{href:"https://www.iana.org/time-zones",children:"IANA time zone database"}),". To do this, adjust the original UTC timestamp by adding 3 hours. Therefore, the new timestamp should be ",(0,s.jsx)(n.code,{children:"2021-01-01T13:00:00.000Z"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"When converting time zones, consider the following:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Adding a time zone offset could change not only the time but the date as well."}),"\n",(0,s.jsx)(n.li,{children:"An offset may vary due to DST (Daylight Saving Time) or other regional adjustments."}),"\n",(0,s.jsx)(n.li,{children:"If your data is measured in business days and does not include a time component, in most cases, you should not adjust it to a time zone."}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"approaches",children:"Approaches"}),"\n",(0,s.jsx)(n.p,{children:"Consider the approaches below to convert time values to the required time zone."}),"\n",(0,s.jsx)(n.h3,{id:"using-pure-javascript",children:"Using pure JavaScript"}),"\n",(0,s.jsxs)(n.p,{children:["For more information on this approach, refer to ",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/a/54127122/3893439",children:"StackOverflow"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function timeToTz(originalTime, timeZone) {\n    const zonedDate = new Date(new Date(originalTime * 1000).toLocaleString('en-US', { timeZone }));\n    return zonedDate.getTime() / 1000;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you only need to support a client (local) time zone, you can use the following function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function timeToLocal(originalTime) {\n    const d = new Date(originalTime * 1000);\n    return Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) / 1000;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-the-date-fns-tz-library",children:"Using the date-fns-tz library"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"utcToZonedTime"})," function from the ",(0,s.jsx)(n.a,{href:"https://github.com/marnusw/date-fns-tz",children:(0,s.jsx)(n.code,{children:"date-fns-tz"})})," library as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { utcToZonedTime } from 'date-fns-tz';\n\nfunction timeToTz(originalTime, timeZone) {\n    const zonedDate = utcToZonedTime(new Date(originalTime * 1000), timeZone);\n    return zonedDate.getTime() / 1000;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-the-iana-time-zone-database",children:"Using the IANA time zone database"}),"\n",(0,s.jsxs)(n.p,{children:["If you process a large dataset and approaches above do not meet your performance requirements, consider using the ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/tzdata",children:(0,s.jsx)(n.code,{children:"tzdata"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This approach can significantly improve performance for the following reasons:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You do not need to calculate the time zone offset for every data point individually. Instead, you can look up the correct offset just once for the first timestamp using a fast binary search."}),"\n",(0,s.jsx)(n.li,{children:"After finding the starting offset, you go through the rest data and check whether an offset should be changed, for example, because of DST starting/ending."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"why-are-time-zones-not-supported",children:"Why are time zones not supported?"}),"\n",(0,s.jsx)(n.p,{children:"The approaches above were not implemented in Lightweight Charts\u2122 for the following reasons:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Using ",(0,s.jsx)(n.a,{href:"#using-pure-javascript",children:"pure JavaScript"})," is slow. In our tests, processing 100,000 data points took over 20 seconds."]}),"\n",(0,s.jsxs)(n.li,{children:["Using the ",(0,s.jsx)(n.a,{href:"#using-the-date-fns-tz-library",children:"date-fns-tz library"})," introduces additional dependencies and is also slow. In our tests, processing 100,000 data points took 18 seconds."]}),"\n",(0,s.jsxs)(n.li,{children:["Incorporating the ",(0,s.jsx)(n.a,{href:"#using-the-iana-time-zone-database",children:"IANA time zone database"})," increases the bundle size by ",(0,s.jsx)(n.a,{href:"https://bundlephobia.com/package/tzdata",children:"29.9 kB"}),", which is nearly the size of the entire Lightweight Charts\u2122 library."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Since time zone support is not required for all users, it is intentionally left out of the library to maintain high performance and a lightweight package size."})]})}function c(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return a}});var i=t(67294);let s={},o=i.createContext(s);function a(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);