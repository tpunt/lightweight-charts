"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["13282"],{61423:function(e,i,t){t.r(i),t.d(i,{default:()=>h,frontMatter:()=>s,metadata:()=>n,assets:()=>c,toc:()=>l,contentTitle:()=>o});var n=JSON.parse('{"id":"analysis-indicators","title":"Analysis indicators","description":"Overview","source":"@site/tutorials/analysis-indicators.mdx","sourceDirName":".","slug":"/analysis-indicators","permalink":"/lightweight-charts/tutorials/analysis-indicators","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Analysis indicators","pagination_title":"Conclusion","sidebar_label":"Analysis indicators","id":"analysis-indicators"},"sidebar":"tutorialsSidebar","previous":{"title":"Yield Curve with Updates","permalink":"/lightweight-charts/tutorials/demos/yield-curve-with-update-markers"}}'),a=t("85893"),r=t("50065");let s={sidebar_position:3,title:"Analysis indicators",pagination_title:"Conclusion",sidebar_label:"Analysis indicators",id:"analysis-indicators"},o=void 0,c={},l=[{value:"Overview",id:"overview",level:2},{value:"Available indicators",id:"available-indicators",level:3},{value:"Live demos",id:"live-demos",level:3},{value:"How to use the examples",id:"how-to-use-the-examples",level:2},{value:"Option 1: copy the source code",id:"option-1-copy-the-source-code",level:3},{value:"Option 2: compile the examples",id:"option-2-compile-the-examples",level:3},{value:"How to add indicator",id:"how-to-add-indicator",level:2},{value:"Helper function (recommended)",id:"helper-function-recommended",level:3},{value:"Example",id:"example",level:4},{value:"Direct calculation",id:"direct-calculation",level:3},{value:"Example",id:"example-1",level:4}];function d(e){let i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(i.p,{children:"This guide provides an overview of the custom indicator examples.\nThese examples serve as a starting point for creating your own indicators.\nYou can use them directly in your projects."}),"\n",(0,a.jsx)(i.h3,{id:"available-indicators",children:"Available indicators"}),"\n",(0,a.jsx)(i.p,{children:"Below is a list of indicators where each link points to their source code on GitHub."}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/average-price",children:"Average Price"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/correlation",children:"Correlation"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/median-price",children:"Median Price"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/momentum",children:"Momentum"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/moving-average",children:"Simple Moving Average"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/percent-change",children:"Percent Change"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/product",children:"Product"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/ratio",children:"Ratio"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/spread",children:"Spread"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/sum",children:"Sum"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:"https://github.com/tradingview/lightweight-charts/tree/master/indicator-examples/src/indicators/weighted-close",children:"Weighted Close"})}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"live-demos",children:"Live demos"}),"\n",(0,a.jsxs)(i.p,{children:["You can see all the indicators in action on the ",(0,a.jsx)(i.a,{href:"https://tradingview.github.io/lightweight-charts/indicator-examples/",children:"live demos page"}),".\nEach indicator has two demos:"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Helper"}),": shows the recommended method with automatic updates."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Direct calculation"}),": shows the method with a pure function."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"how-to-use-the-examples",children:"How to use the examples"}),"\n",(0,a.jsx)(i.p,{children:"The examples are self-contained and not available on a package manager like NPM.\nTherefore, you have two options for integrating them into your project."}),"\n",(0,a.jsx)(i.h3,{id:"option-1-copy-the-source-code",children:"Option 1: copy the source code"}),"\n",(0,a.jsx)(i.p,{children:"The simplest way to use an indicator is to copy its source code directly into your project.\nFor example, if you want to use the Moving Average indicator, copy the following files into your project's source tree."}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"indicator-examples/src/indicators/moving-average/moving-average.ts"})}),"\n",(0,a.jsx)(i.li,{children:(0,a.jsx)(i.code,{children:"indicator-examples/src/indicators/moving-average/moving-average-calculation.ts"})}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"indicator-examples/src/helpers/timestamp-data.ts"})," (dependency for the calculation)"]}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["You can then import the ",(0,a.jsx)(i.code,{children:"applyMovingAverageIndicator"})," helper or the ",(0,a.jsx)(i.code,{children:"calculateMovingAverageIndicatorValues"})," function directly into your code."]}),"\n",(0,a.jsx)(i.h3,{id:"option-2-compile-the-examples",children:"Option 2: compile the examples"}),"\n",(0,a.jsx)(i.p,{children:"If you prefer to use a compiled JavaScript module, you can build the examples yourself."}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:["Clone the ",(0,a.jsx)(i.code,{children:"lightweight-charts"})," repository."]}),"\n",(0,a.jsxs)(i.li,{children:["Build the main library first:","\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-shell",children:"npm install\nnpm run build:prod\n"})}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["Navigate to the examples directory, install dependencies, and run the compile script:","\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-shell",children:"cd indicator-examples\nnpm install\nnpm run compile\n"})}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["The compiled output will be available in the ",(0,a.jsx)(i.code,{children:"indicator-examples/compiled"})," folder. You can then copy this folder into your project and import the modules."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"how-to-add-indicator",children:"How to add indicator"}),"\n",(0,a.jsx)(i.p,{children:"There are two distinct approaches to applying these indicators to your chart."}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["Using a ",(0,a.jsx)(i.a,{href:"#helper-function-recommended",children:"helper function"})," that creates the indicator series and automatically keeps it in sync with the source series' data."]}),"\n",(0,a.jsxs)(i.li,{children:["Using a ",(0,a.jsx)(i.a,{href:"#direct-calculation",children:"pure function"})," to directly calculate the indicator data from a static dataset."]}),"\n"]}),"\n",(0,a.jsx)(i.admonition,{type:"tip",children:(0,a.jsxs)(i.p,{children:["We recommend using the ",(0,a.jsx)(i.a,{href:"#helper-function-recommended",children:"Helper function"})," for its simplicity and automatic data synchronization."]})}),"\n",(0,a.jsx)(i.h3,{id:"helper-function-recommended",children:"Helper function (recommended)"}),"\n",(0,a.jsxs)(i.p,{children:["Each indicator includes an ",(0,a.jsx)(i.code,{children:"apply\u2026"})," function (e.g., ",(0,a.jsx)(i.code,{children:"applyMovingAverageIndicator"}),"). This is the preferred and easier method."]}),"\n",(0,a.jsx)(i.p,{children:"This function takes the source series API object itself (not the data) and the options.\nIt handles everything for you:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Creates the new indicator series."}),"\n",(0,a.jsx)(i.li,{children:"Performs the initial calculation."}),"\n",(0,a.jsx)(i.li,{children:"Automatically listens for data changes on the source series and recalculates the indicator whenever the source data is updated."}),"\n"]}),"\n",(0,a.jsx)(i.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(i.p,{children:"The example below shows how to add an Exponential Moving Average (EMA) with the helper function."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"import { createChart, CandlestickSeries, LineStyle } from 'lightweight-charts';\nimport { applyMovingAverageIndicator } from './indicators/moving-average/moving-average';\nimport { symbolData } from './my-data-source';\n\nconst chart = createChart(document.body);\nconst mainSeries = chart.addSeries(CandlestickSeries);\nmainSeries.setData(symbolData.slice(0, 100)); // Set initial data\n\n// 1. Apply the indicator directly to the source series\nconst emaSeries = applyMovingAverageIndicator(mainSeries, {\n	length: 10,\n	source: 'close',\n	smoothingLine: 'EMA',\n});\n\n// 2. (Optional) Customize the new indicator series\nemaSeries.applyOptions({\n	color: 'orange',\n	lineWidth: 2,\n	lineStyle: LineStyle.Dotted,\n});\n\n// Now, when we update the mainSeries, the emaSeries will update automatically\nsetInterval(() => {\n    const nextBar = getNextRealTimeBar();\n    mainSeries.update(nextBar); // The EMA series will update itself\n}, 1000);\n"})}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.code,{children:"apply\u2026"})," helper attaches a lightweight ",(0,a.jsx)(i.code,{children:"ISeriesPrimitive"})," to the source series.\nThis primitive subscribes to the series' data changes.\nWhen a change is detected, it refetches the data, runs the calculation, and updates the indicator series automatically."]}),"\n",(0,a.jsx)(i.p,{children:"This approach is more robust, requires less code, and is the recommended way to use these examples."}),"\n",(0,a.jsx)(i.h3,{id:"direct-calculation",children:"Direct calculation"}),"\n",(0,a.jsxs)(i.p,{children:["Each indicator includes a ",(0,a.jsx)(i.code,{children:"calculate\u2026"})," function (e.g., ",(0,a.jsx)(i.code,{children:"calculateMovingAverageIndicatorValues"}),").\nThis is a pure function that takes your series data and a set of options as input and returns an array of calculated data points for the indicator."]}),"\n",(0,a.jsx)(i.p,{children:"This method is useful if you have a static dataset or want full control over when the indicator is recalculated."}),"\n",(0,a.jsx)(i.h4,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(i.p,{children:"The example below shows how to add a Simple Moving Average (SMA)."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"import { createChart, LineSeries, CandlestickSeries } from 'lightweight-charts';\nimport { calculateMovingAverageIndicatorValues } from './indicators/moving-average/moving-average-calculation';\nimport { symbolData } from './my-data-source';\n\nconst chart = createChart(document.body);\nconst mainSeries = chart.addSeries(CandlestickSeries);\nmainSeries.setData(symbolData);\n\n// 1. Calculate the indicator data from the source data\nconst smaData = calculateMovingAverageIndicatorValues(symbolData, {\n	length: 20,\n	source: 'close',\n});\n\n// 2. Create a new series for the indicator\nconst smaSeries = chart.addSeries(LineSeries, {\n	color: 'blue',\n	lineWidth: 2,\n});\n\n// 3. Set the calculated data on the new series\nsmaSeries.setData(smaData);\n"})}),"\n",(0,a.jsx)(i.admonition,{type:"warning",children:(0,a.jsxs)(i.p,{children:["This approach is ",(0,a.jsx)(i.strong,{children:"not reactive"}),". If you update the ",(0,a.jsx)(i.code,{children:"mainSeries"})," with new data (e.g., from a real-time feed), the ",(0,a.jsx)(i.code,{children:"smaSeries"})," will ",(0,a.jsx)(i.strong,{children:"not"})," update automatically.\nYou are responsible for manually recalculating the indicator and calling ",(0,a.jsx)(i.code,{children:"smaSeries.setData()"})," again."]})})]})}function h(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},50065:function(e,i,t){t.d(i,{Z:function(){return o},a:function(){return s}});var n=t(67294);let a={},r=n.createContext(a);function s(e){let i=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);